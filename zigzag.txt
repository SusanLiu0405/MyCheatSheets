/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        LinkedList<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> output_traversal_result = new ArrayList<List<Integer>>();


        while (root == null) {
            return output_traversal_result;
        }

        queue.add(root);
        int level = 0;
        while (!queue.isEmpty()) {
            output_traversal_result.add(new ArrayList<Integer>());
            int level_length = queue.size();
            for(int level_index = 0; level_index < level_length; level_index++){
                TreeNode parent = queue.removeFirst();
                if (level %2 == 0) {
                    output_traversal_result.get(level).add(0, parent.val);   // output_traversal_result = [3];
                } else {
                    output_traversal_result.get(level).add(parent.val);   // output_traversal_result = [3];
                }

                if (parent.right != null) {
                    queue.add(parent.right); // queue = [3];

                }
                if (parent.left != null) {
                    queue.add(parent.left);    //queue = [];

                }

            }
            level++;
        }
        return output_traversal_result;
    }
}